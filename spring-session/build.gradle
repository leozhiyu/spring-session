apply from: JAVA_GRADLE
apply from: SPRING3_GRADLE
apply from: MAVEN_GRADLE

apply plugin: 'spring-io'
apply plugin: "nebula.optional-base"

description = "Spring Session"

project.conf2ScopeMappings.addMapping(MavenPlugin.TEST_COMPILE_PRIORITY + 1, project.configurations.getByName("integrationTestCompile"), Conf2ScopeMappingContainer.TEST)
project.conf2ScopeMappings.addMapping(MavenPlugin.TEST_COMPILE_PRIORITY + 2, project.configurations.getByName("integrationTestRuntime"), Conf2ScopeMappingContainer.TEST)
check.dependsOn integrationTest

configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile "commons-logging:commons-logging:$commonsLoggingVersion"

	compile "org.springframework.data:spring-data-redis:$springDataRedisVersion", optional
	compile "com.hazelcast:hazelcast:$hazelcastVersion", optional
	compile "org.springframework.data:spring-data-gemfire:$springDataGemFireVersion", optional
	compile "org.springframework:spring-jdbc:$springVersion", optional
	compile "org.springframework.data:spring-data-mongodb:$springDataMongoVersion", optional
	compile "org.springframework:spring-context:$springVersion", optional
	compile "org.springframework:spring-web:$springVersion", optional
	compile "org.springframework:spring-messaging:$springVersion", optional
	compile "org.springframework:spring-websocket:$springVersion", optional
	compile "org.springframework.security:spring-security-core:$springSecurityVersion", optional
	compile "org.springframework.security:spring-security-web:$springSecurityVersion", optional

	provided "javax.servlet:javax.servlet-api:$servletApiVersion"
	integrationTestCompile "redis.clients:jedis:$jedisVersion",
			"org.apache.commons:commons-pool2:$commonsPoolVersion",
			"com.hazelcast:hazelcast-client:$hazelcastVersion",
			"com.h2database:h2:$h2Version",
			"org.hsqldb:hsqldb:2.3.3",
			"org.apache.derby:derby:10.12.1.1",
			"de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5"

	integrationTestRuntime "org.springframework.shell:spring-shell:$springShellVersion"

	testCompile "junit:junit:$junitVersion",
			"org.mockito:mockito-core:$mockitoVersion",
			"edu.umd.cs.mtc:multithreadedtc:1.01",
			"org.springframework:spring-test:$springVersion",
			"org.assertj:assertj-core:$assertjVersion",
			"org.springframework.security:spring-security-core:$springSecurityVersion"

	jacoco "org.jacoco:org.jacoco.agent:0.7.2.201409121644:runtime"

}

dependencyManagement {
	springIoTestRuntime {
		imports {
			mavenBom "io.spring.platform:platform-bom:${springIoVersion}"
		}
	}
}

ext.javadocLinks = [
		"https://docs.oracle.com/javase/8/docs/api/",
		"https://docs.oracle.com/javaee/7/api/",
		"https://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/",  // CommonJ
		"https://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/topic/com.ibm.websphere.javadoc.doc/web/apidocs/",
		"https://glassfish.java.net/nonav/docs/v3/api/",
		"https://docs.jboss.org/jbossas/javadoc/4.0.5/connector/",
		"https://docs.jboss.org/jbossas/javadoc/7.1.2.Final/",
		"https://commons.apache.org/proper/commons-lang/javadocs/api-2.5/",
		"https://commons.apache.org/proper/commons-codec/apidocs/",
		"https://commons.apache.org/proper/commons-dbcp/apidocs/",
		"https://portals.apache.org/pluto/portlet-2.0-apidocs/",
		"https://tiles.apache.org/tiles-request/apidocs/",
		"https://tiles.apache.org/framework/apidocs/",
		"http://aopalliance.sourceforge.net/doc/",
		"https://www.eclipse.org/aspectj/doc/released/aspectj5rt-api/",
		"https://www.quartz-scheduler.org/api/2.2.0/",
		"https://fasterxml.github.com/jackson-core/javadoc/2.3.0/",
		"https://fasterxml.github.com/jackson-databind/javadoc/2.3.0/",
		"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/"
] as String[]

javadoc {
	description = "Generates project-level javadoc for use in -javadoc jar"

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.links(project.ext.javadocLinks)

}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	// don't include or exclude anything explicitly by default. See SPR-12085.
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

test {
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=${project.group}.*"
}
integrationTest {
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=${project.group}.*"
}

apply plugin: 'maven'

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: release_url) {
				authentication(userName: "admin", password: "Kyligence@2016")
			}
			pom.version = version
			pom.artifactId = artifact_id
			pom.groupId = group_id
		}
	}
}